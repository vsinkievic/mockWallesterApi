package io.github.vsinkievic.mockwallesterapi.domain;

import static io.github.vsinkievic.mockwallesterapi.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AccountStatementRecordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountStatementRecordAllPropertiesEquals(AccountStatementRecord expected, AccountStatementRecord actual) {
        assertAccountStatementRecordAutoGeneratedPropertiesEquals(expected, actual);
        assertAccountStatementRecordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountStatementRecordAllUpdatablePropertiesEquals(
        AccountStatementRecord expected,
        AccountStatementRecord actual
    ) {
        assertAccountStatementRecordUpdatableFieldsEquals(expected, actual);
        assertAccountStatementRecordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountStatementRecordAutoGeneratedPropertiesEquals(
        AccountStatementRecord expected,
        AccountStatementRecord actual
    ) {
        assertThat(actual)
            .as("Verify AccountStatementRecord auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountStatementRecordUpdatableFieldsEquals(AccountStatementRecord expected, AccountStatementRecord actual) {
        assertThat(actual)
            .as("Verify AccountStatementRecord relevant properties")
            .satisfies(a -> assertThat(a.getCardId()).as("check cardId").isEqualTo(expected.getCardId()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getGroup()).as("check group").isEqualTo(expected.getGroup()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a ->
                assertThat(a.getTransactionAmount())
                    .as("check transactionAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTransactionAmount())
            )
            .satisfies(a ->
                assertThat(a.getTransactionCurrencyCode())
                    .as("check transactionCurrencyCode")
                    .isEqualTo(expected.getTransactionCurrencyCode())
            )
            .satisfies(a ->
                assertThat(a.getAccountAmount())
                    .as("check accountAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAccountAmount())
            )
            .satisfies(a ->
                assertThat(a.getAccountCurrencyCode()).as("check accountCurrencyCode").isEqualTo(expected.getAccountCurrencyCode())
            )
            .satisfies(a ->
                assertThat(a.getMerchantCategoryCode()).as("check merchantCategoryCode").isEqualTo(expected.getMerchantCategoryCode())
            )
            .satisfies(a -> assertThat(a.getMerchantId()).as("check merchantId").isEqualTo(expected.getMerchantId()))
            .satisfies(a -> assertThat(a.getTerminalId()).as("check terminalId").isEqualTo(expected.getTerminalId()))
            .satisfies(a -> assertThat(a.getMerchantName()).as("check merchantName").isEqualTo(expected.getMerchantName()))
            .satisfies(a -> assertThat(a.getMerchantCity()).as("check merchantCity").isEqualTo(expected.getMerchantCity()))
            .satisfies(a ->
                assertThat(a.getMerchantCountryCode()).as("check merchantCountryCode").isEqualTo(expected.getMerchantCountryCode())
            )
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getOriginalAuthorizationId())
                    .as("check originalAuthorizationId")
                    .isEqualTo(expected.getOriginalAuthorizationId())
            )
            .satisfies(a -> assertThat(a.getIsReversal()).as("check isReversal").isEqualTo(expected.getIsReversal()))
            .satisfies(a -> assertThat(a.getIsDeclined()).as("check isDeclined").isEqualTo(expected.getIsDeclined()))
            .satisfies(a -> assertThat(a.getIsCleared()).as("check isCleared").isEqualTo(expected.getIsCleared()))
            .satisfies(a -> assertThat(a.getMarkedForDisputeAt()).as("check markedForDisputeAt").isEqualTo(expected.getMarkedForDisputeAt())
            )
            .satisfies(a -> assertThat(a.getMarkedForDisputeBy()).as("check markedForDisputeBy").isEqualTo(expected.getMarkedForDisputeBy())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getResponse()).as("check response").isEqualTo(expected.getResponse()))
            .satisfies(a -> assertThat(a.getResponseCode()).as("check responseCode").isEqualTo(expected.getResponseCode()))
            .satisfies(a -> assertThat(a.getAccountExternalId()).as("check accountExternalId").isEqualTo(expected.getAccountExternalId()))
            .satisfies(a -> assertThat(a.getMaskedCardNumber()).as("check maskedCardNumber").isEqualTo(expected.getMaskedCardNumber()))
            .satisfies(a ->
                assertThat(a.getHasPaymentDocumentFiles())
                    .as("check hasPaymentDocumentFiles")
                    .isEqualTo(expected.getHasPaymentDocumentFiles())
            )
            .satisfies(a -> assertThat(a.getHasPaymentNotes()).as("check hasPaymentNotes").isEqualTo(expected.getHasPaymentNotes()))
            .satisfies(a -> assertThat(a.getCardName()).as("check cardName").isEqualTo(expected.getCardName()))
            .satisfies(a -> assertThat(a.getEmbossingName()).as("check embossingName").isEqualTo(expected.getEmbossingName()))
            .satisfies(a -> assertThat(a.getEmbossingFirstName()).as("check embossingFirstName").isEqualTo(expected.getEmbossingFirstName())
            )
            .satisfies(a -> assertThat(a.getEmbossingLastName()).as("check embossingLastName").isEqualTo(expected.getEmbossingLastName()))
            .satisfies(a ->
                assertThat(a.getEmbossingCompanyName()).as("check embossingCompanyName").isEqualTo(expected.getEmbossingCompanyName())
            )
            .satisfies(a -> assertThat(a.getSubType()).as("check subType").isEqualTo(expected.getSubType()))
            .satisfies(a -> assertThat(a.getPurchaseDate()).as("check purchaseDate").isEqualTo(expected.getPurchaseDate()))
            .satisfies(a ->
                assertThat(a.getExchangeRate())
                    .as("check exchangeRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getExchangeRate())
            )
            .satisfies(a ->
                assertThat(a.getEnrichedMerchantName()).as("check enrichedMerchantName").isEqualTo(expected.getEnrichedMerchantName())
            )
            .satisfies(a ->
                assertThat(a.getEnrichedMerchantUrl()).as("check enrichedMerchantUrl").isEqualTo(expected.getEnrichedMerchantUrl())
            )
            .satisfies(a ->
                assertThat(a.getEnrichedMerchantDomain()).as("check enrichedMerchantDomain").isEqualTo(expected.getEnrichedMerchantDomain())
            )
            .satisfies(a ->
                assertThat(a.getEnrichedMerchantTelephone())
                    .as("check enrichedMerchantTelephone")
                    .isEqualTo(expected.getEnrichedMerchantTelephone())
            )
            .satisfies(a ->
                assertThat(a.getEnrichedMerchantIconUrl())
                    .as("check enrichedMerchantIconUrl")
                    .isEqualTo(expected.getEnrichedMerchantIconUrl())
            )
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountStatementRecordUpdatableRelationshipsEquals(
        AccountStatementRecord expected,
        AccountStatementRecord actual
    ) {
        // empty method
    }
}
