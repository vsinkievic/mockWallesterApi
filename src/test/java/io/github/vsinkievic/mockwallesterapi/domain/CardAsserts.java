package io.github.vsinkievic.mockwallesterapi.domain;

import static io.github.vsinkievic.mockwallesterapi.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CardAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardAllPropertiesEquals(Card expected, Card actual) {
        assertCardAutoGeneratedPropertiesEquals(expected, actual);
        assertCardAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardAllUpdatablePropertiesEquals(Card expected, Card actual) {
        assertCardUpdatableFieldsEquals(expected, actual);
        assertCardUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardAutoGeneratedPropertiesEquals(Card expected, Card actual) {
        assertThat(actual)
            .as("Verify Card auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardUpdatableFieldsEquals(Card expected, Card actual) {
        assertThat(actual)
            .as("Verify Card relevant properties")
            .satisfies(a -> assertThat(a.getPredecessorCardId()).as("check predecessorCardId").isEqualTo(expected.getPredecessorCardId()))
            .satisfies(a -> assertThat(a.getAccountId()).as("check accountId").isEqualTo(expected.getAccountId()))
            .satisfies(a -> assertThat(a.getPersonId()).as("check personId").isEqualTo(expected.getPersonId()))
            .satisfies(a -> assertThat(a.getExternalId()).as("check externalId").isEqualTo(expected.getExternalId()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getMaskedCardNumber()).as("check maskedCardNumber").isEqualTo(expected.getMaskedCardNumber()))
            .satisfies(a -> assertThat(a.getReferenceNumber()).as("check referenceNumber").isEqualTo(expected.getReferenceNumber()))
            .satisfies(a -> assertThat(a.getExpiryDate()).as("check expiryDate").isEqualTo(expected.getExpiryDate()))
            .satisfies(a -> assertThat(a.getBlockType()).as("check blockType").isEqualTo(expected.getBlockType()))
            .satisfies(a -> assertThat(a.getBlockedAt()).as("check blockedAt").isEqualTo(expected.getBlockedAt()))
            .satisfies(a -> assertThat(a.getBlockedBy()).as("check blockedBy").isEqualTo(expected.getBlockedBy()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getEmbossingName()).as("check embossingName").isEqualTo(expected.getEmbossingName()))
            .satisfies(a -> assertThat(a.getEmbossingFirstName()).as("check embossingFirstName").isEqualTo(expected.getEmbossingFirstName())
            )
            .satisfies(a -> assertThat(a.getEmbossingLastName()).as("check embossingLastName").isEqualTo(expected.getEmbossingLastName()))
            .satisfies(a ->
                assertThat(a.getEmbossingCompanyName()).as("check embossingCompanyName").isEqualTo(expected.getEmbossingCompanyName())
            )
            .satisfies(a ->
                assertThat(a.getLimitDailyPurchase())
                    .as("check limitDailyPurchase")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitDailyPurchase())
            )
            .satisfies(a ->
                assertThat(a.getLimitDailyWithdrawal())
                    .as("check limitDailyWithdrawal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitDailyWithdrawal())
            )
            .satisfies(a ->
                assertThat(a.getLimitMonthlyPurchase())
                    .as("check limitMonthlyPurchase")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitMonthlyPurchase())
            )
            .satisfies(a ->
                assertThat(a.getLimitMonthlyWithdrawal())
                    .as("check limitMonthlyWithdrawal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitMonthlyWithdrawal())
            )
            .satisfies(a ->
                assertThat(a.getLimitTransactionPurchase())
                    .as("check limitTransactionPurchase")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitTransactionPurchase())
            )
            .satisfies(a -> assertThat(a.getSecure3DMobile()).as("check secure3DMobile").isEqualTo(expected.getSecure3DMobile()))
            .satisfies(a -> assertThat(a.getSecure3DEmail()).as("check secure3DEmail").isEqualTo(expected.getSecure3DEmail()))
            .satisfies(a ->
                assertThat(a.getSecure3DOutOfBandEnabled())
                    .as("check secure3DOutOfBandEnabled")
                    .isEqualTo(expected.getSecure3DOutOfBandEnabled())
            )
            .satisfies(a ->
                assertThat(a.getSecure3DOutOfBandId()).as("check secure3DOutOfBandId").isEqualTo(expected.getSecure3DOutOfBandId())
            )
            .satisfies(a -> assertThat(a.getDeliveryFirstName()).as("check deliveryFirstName").isEqualTo(expected.getDeliveryFirstName()))
            .satisfies(a -> assertThat(a.getDeliveryLastName()).as("check deliveryLastName").isEqualTo(expected.getDeliveryLastName()))
            .satisfies(a ->
                assertThat(a.getDeliveryCompanyName()).as("check deliveryCompanyName").isEqualTo(expected.getDeliveryCompanyName())
            )
            .satisfies(a -> assertThat(a.getDeliveryAddress1()).as("check deliveryAddress1").isEqualTo(expected.getDeliveryAddress1()))
            .satisfies(a -> assertThat(a.getDeliveryAddress2()).as("check deliveryAddress2").isEqualTo(expected.getDeliveryAddress2()))
            .satisfies(a -> assertThat(a.getDeliveryPostalCode()).as("check deliveryPostalCode").isEqualTo(expected.getDeliveryPostalCode())
            )
            .satisfies(a -> assertThat(a.getDeliveryCity()).as("check deliveryCity").isEqualTo(expected.getDeliveryCity()))
            .satisfies(a ->
                assertThat(a.getDeliveryCountryCode()).as("check deliveryCountryCode").isEqualTo(expected.getDeliveryCountryCode())
            )
            .satisfies(a ->
                assertThat(a.getDeliveryDispatchMethod()).as("check deliveryDispatchMethod").isEqualTo(expected.getDeliveryDispatchMethod())
            )
            .satisfies(a -> assertThat(a.getDeliveryPhone()).as("check deliveryPhone").isEqualTo(expected.getDeliveryPhone()))
            .satisfies(a ->
                assertThat(a.getDeliveryTrackingNumber()).as("check deliveryTrackingNumber").isEqualTo(expected.getDeliveryTrackingNumber())
            )
            .satisfies(a ->
                assertThat(a.getIsEnrolledFor3DSecure()).as("check isEnrolledFor3DSecure").isEqualTo(expected.getIsEnrolledFor3DSecure())
            )
            .satisfies(a ->
                assertThat(a.getIsCard3DSecureActivated())
                    .as("check isCard3DSecureActivated")
                    .isEqualTo(expected.getIsCard3DSecureActivated())
            )
            .satisfies(a -> assertThat(a.getRenewAutomatically()).as("check renewAutomatically").isEqualTo(expected.getRenewAutomatically())
            )
            .satisfies(a -> assertThat(a.getIsDisposable()).as("check isDisposable").isEqualTo(expected.getIsDisposable()))
            .satisfies(a ->
                assertThat(a.getSecurityContactlessEnabled())
                    .as("check securityContactlessEnabled")
                    .isEqualTo(expected.getSecurityContactlessEnabled())
            )
            .satisfies(a ->
                assertThat(a.getSecurityWithdrawalEnabled())
                    .as("check securityWithdrawalEnabled")
                    .isEqualTo(expected.getSecurityWithdrawalEnabled())
            )
            .satisfies(a ->
                assertThat(a.getSecurityInternetPurchaseEnabled())
                    .as("check securityInternetPurchaseEnabled")
                    .isEqualTo(expected.getSecurityInternetPurchaseEnabled())
            )
            .satisfies(a ->
                assertThat(a.getSecurityOverallLimitsEnabled())
                    .as("check securityOverallLimitsEnabled")
                    .isEqualTo(expected.getSecurityOverallLimitsEnabled())
            )
            .satisfies(a ->
                assertThat(a.getSecurityAllTimeLimitsEnabled())
                    .as("check securityAllTimeLimitsEnabled")
                    .isEqualTo(expected.getSecurityAllTimeLimitsEnabled())
            )
            .satisfies(a ->
                assertThat(a.getPersonalizationProductCode())
                    .as("check personalizationProductCode")
                    .isEqualTo(expected.getPersonalizationProductCode())
            )
            .satisfies(a -> assertThat(a.getCarrierType()).as("check carrierType").isEqualTo(expected.getCarrierType()))
            .satisfies(a ->
                assertThat(a.getCardMetadataProfileId()).as("check cardMetadataProfileId").isEqualTo(expected.getCardMetadataProfileId())
            )
            .satisfies(a -> assertThat(a.getActivatedAt()).as("check activatedAt").isEqualTo(expected.getActivatedAt()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getClosedAt()).as("check closedAt").isEqualTo(expected.getClosedAt()))
            .satisfies(a -> assertThat(a.getClosedBy()).as("check closedBy").isEqualTo(expected.getClosedBy()))
            .satisfies(a -> assertThat(a.getCloseReason()).as("check closeReason").isEqualTo(expected.getCloseReason()))
            .satisfies(a -> assertThat(a.getCompanyId()).as("check companyId").isEqualTo(expected.getCompanyId()))
            .satisfies(a -> assertThat(a.getDispatchedAt()).as("check dispatchedAt").isEqualTo(expected.getDispatchedAt()))
            .satisfies(a ->
                assertThat(a.getNotificationReceiptsReminderEnabled())
                    .as("check notificationReceiptsReminderEnabled")
                    .isEqualTo(expected.getNotificationReceiptsReminderEnabled())
            )
            .satisfies(a ->
                assertThat(a.getNotificationInstantSpendUpdateEnabled())
                    .as("check notificationInstantSpendUpdateEnabled")
                    .isEqualTo(expected.getNotificationInstantSpendUpdateEnabled())
            )
            .satisfies(a -> assertThat(a.getDisposableType()).as("check disposableType").isEqualTo(expected.getDisposableType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardUpdatableRelationshipsEquals(Card expected, Card actual) {
        // empty method
    }
}
