package io.github.vsinkievic.mockwallesterapi.domain;

import static io.github.vsinkievic.mockwallesterapi.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CompanyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyAllPropertiesEquals(Company expected, Company actual) {
        assertCompanyAutoGeneratedPropertiesEquals(expected, actual);
        assertCompanyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyAllUpdatablePropertiesEquals(Company expected, Company actual) {
        assertCompanyUpdatableFieldsEquals(expected, actual);
        assertCompanyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyAutoGeneratedPropertiesEquals(Company expected, Company actual) {
        assertThat(actual)
            .as("Verify Company auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyUpdatableFieldsEquals(Company expected, Company actual) {
        assertThat(actual)
            .as("Verify Company relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getRegistrationNumber()).as("check registrationNumber").isEqualTo(expected.getRegistrationNumber())
            )
            .satisfies(a ->
                assertThat(a.getRegAddressCountryCode()).as("check regAddressCountryCode").isEqualTo(expected.getRegAddressCountryCode())
            )
            .satisfies(a -> assertThat(a.getRegAddress1()).as("check regAddress1").isEqualTo(expected.getRegAddress1()))
            .satisfies(a -> assertThat(a.getRegAddress2()).as("check regAddress2").isEqualTo(expected.getRegAddress2()))
            .satisfies(a -> assertThat(a.getRegAddressCity()).as("check regAddressCity").isEqualTo(expected.getRegAddressCity()))
            .satisfies(a ->
                assertThat(a.getRegAddressPostalCode()).as("check regAddressPostalCode").isEqualTo(expected.getRegAddressPostalCode())
            )
            .satisfies(a ->
                assertThat(a.getHqAddressCountryCode()).as("check hqAddressCountryCode").isEqualTo(expected.getHqAddressCountryCode())
            )
            .satisfies(a -> assertThat(a.getHqAddress1()).as("check hqAddress1").isEqualTo(expected.getHqAddress1()))
            .satisfies(a -> assertThat(a.getHqAddress2()).as("check hqAddress2").isEqualTo(expected.getHqAddress2()))
            .satisfies(a -> assertThat(a.getHqAddressCity()).as("check hqAddressCity").isEqualTo(expected.getHqAddressCity()))
            .satisfies(a ->
                assertThat(a.getHqAddressPostalCode()).as("check hqAddressPostalCode").isEqualTo(expected.getHqAddressPostalCode())
            )
            .satisfies(a -> assertThat(a.getRiskProfile()).as("check riskProfile").isEqualTo(expected.getRiskProfile()))
            .satisfies(a -> assertThat(a.getMobile()).as("check mobile").isEqualTo(expected.getMobile()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()))
            .satisfies(a -> assertThat(a.getIndustryType()).as("check industryType").isEqualTo(expected.getIndustryType()))
            .satisfies(a ->
                assertThat(a.getDateOfIncorporation()).as("check dateOfIncorporation").isEqualTo(expected.getDateOfIncorporation())
            )
            .satisfies(a ->
                assertThat(a.getBusinessRelationshipPurpose())
                    .as("check businessRelationshipPurpose")
                    .isEqualTo(expected.getBusinessRelationshipPurpose())
            )
            .satisfies(a -> assertThat(a.getIsSanctionsRelated()).as("check isSanctionsRelated").isEqualTo(expected.getIsSanctionsRelated())
            )
            .satisfies(a ->
                assertThat(a.getIsAdverseMediaInvolved()).as("check isAdverseMediaInvolved").isEqualTo(expected.getIsAdverseMediaInvolved())
            )
            .satisfies(a -> assertThat(a.getEmployeesQuantity()).as("check employeesQuantity").isEqualTo(expected.getEmployeesQuantity()))
            .satisfies(a -> assertThat(a.getCardSpendingAmount()).as("check cardSpendingAmount").isEqualTo(expected.getCardSpendingAmount())
            )
            .satisfies(a ->
                assertThat(a.getLimitDailyPurchase())
                    .as("check limitDailyPurchase")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitDailyPurchase())
            )
            .satisfies(a ->
                assertThat(a.getLimitDailyWithdrawal())
                    .as("check limitDailyWithdrawal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitDailyWithdrawal())
            )
            .satisfies(a ->
                assertThat(a.getLimitMonthlyPurchase())
                    .as("check limitMonthlyPurchase")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitMonthlyPurchase())
            )
            .satisfies(a ->
                assertThat(a.getLimitMonthlyWithdrawal())
                    .as("check limitMonthlyWithdrawal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLimitMonthlyWithdrawal())
            )
            .satisfies(a -> assertThat(a.getKybStatus()).as("check kybStatus").isEqualTo(expected.getKybStatus()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getPushNotificationsEnabled())
                    .as("check pushNotificationsEnabled")
                    .isEqualTo(expected.getPushNotificationsEnabled())
            )
            .satisfies(a ->
                assertThat(a.getPreferredLanguageCode()).as("check preferredLanguageCode").isEqualTo(expected.getPreferredLanguageCode())
            )
            .satisfies(a -> assertThat(a.getVatNumber()).as("check vatNumber").isEqualTo(expected.getVatNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyUpdatableRelationshipsEquals(Company expected, Company actual) {
        // empty method
    }
}
